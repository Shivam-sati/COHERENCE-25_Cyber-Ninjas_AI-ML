// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  companies     Company[]
  analyses      Analysis[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  fileUrl     String?
  fileType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses    Analysis[]
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
}

model Analysis {
  id              String   @id @default(cuid())
  resumeId        String
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  skills          String[]
  sentiment       String
  confidence      Float
  keyPhrases      String[]
  overallScore    Float
  strengths       String[]
  improvements    String[]
  recommendations String[]
  culturalFit     Float
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  website     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumes     Resume[]
  settings    CompanySettings?
}

model CompanySettings {
  id              String   @id @default(cuid())
  companyId       String   @unique
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  requiredSkills  String[]
  preferredSkills String[]
  minExperience   Int?
  maxExperience   Int?
  educationLevel  String?
  location        String?
  remotePolicy    String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  RECRUITER
  MANAGER
} 